syntax = "proto3";

package replication;

import "google/protobuf/timestamp.proto";

// Service definition for replication
service ReplicationService {
  rpc Write (WriteRequest) returns (WriteResponse);
  rpc Read (ReadRequest) returns (ReadResponse);

  // Internal requests for NWR replication
  rpc InternalWrite (InternalWriteRequest) returns (InternalWriteResponse);
  rpc InternalRead (InternalReadRequest) returns (InternalReadResponse);
  rpc GetStatus (GetStatusRequest) returns (GetStatusResponse);
}

// Service definition for video processing workers
service VideoProcessingService {
  // RPC for master to send a video chunk to a worker for processing
  rpc ProcessChunk (ProcessChunkRequest) returns (ProcessChunkResponse);
  // RPC for client/master to retrieve a processed shard file from a worker
  rpc GetShard (GetShardRequest) returns (GetShardResponse);
  // RPC for master to check health of worker nodes
  rpc CheckHealth (HealthCheckRequest) returns (HealthCheckResponse);
}

// --- Client Requests/Responses (Existing) ---

message WriteRequest {
  string key = 1;
  string value = 2;
}

message WriteResponse {
  bool success = 1;
  string message = 2;
  double time_taken = 3;
}

message ReadRequest {
  string key = 1;
}

message ReadResponse {
  bool success = 1;
  string value = 2;
  google.protobuf.Timestamp timestamp = 3;
  string message = 4;
  double time_taken = 5;
}

// --- Internal Requests/Responses (Existing) ---

message InternalWriteRequest {
  string key = 1;
  string value = 2;
  google.protobuf.Timestamp timestamp = 3;
  string coordinator_id = 4;
}

message InternalWriteResponse {
  bool success = 1;
  string server_id = 2;
  string key = 3;
  google.protobuf.Timestamp timestamp = 4;
  string message = 5;
}

message InternalReadRequest {
  string key = 1;
}

message InternalReadResponse {
  bool found = 1;
  string value = 2;
  google.protobuf.Timestamp timestamp = 3;
  string server_id = 4;
  string key = 5;
  string message = 6;
}

// --- Status (Existing) ---

message GetStatusRequest {
}

message GetStatusResponse {
  string server_id = 1;
  int32 message_queue_size = 2;
  float latency_ms = 3;
  float cpu_utilization = 4;
  int64 memory_usage_bytes = 5;
  google.protobuf.Timestamp last_update_time = 6;
  int32 simulated_distance = 7;
  int32 messages_stolen_recent = 8;
}

// --- Video Processing Messages (Existing) ---

message ProcessChunkRequest {
  string video_id = 1;
  int32 chunk_index = 2;
  bytes chunk_data = 3;
}

message ProcessChunkResponse {
  bool success = 1;
  string worker_id = 2;
  string shard_location = 3; // Path or identifier where the shard was stored
  int64 original_size = 4;
  int64 encoded_size = 5;
  string message = 6;
}

// --- Get Shard Messages (New) ---

message GetShardRequest {
  string shard_location = 1; // The path or identifier of the shard to retrieve
}

message GetShardResponse {
  bool success = 1;
  bytes shard_data = 2; // The binary content of the shard file
  string message = 3; // Status or error message
}

// --- Health Check Messages (New) ---

message HealthCheckRequest {
  string master_id = 1; // Identifier of the master requesting the health check
}

message HealthCheckResponse {
  bool is_healthy = 1; // Whether the worker is healthy
  string worker_id = 2; // Identifier of the worker responding
  float cpu_utilization = 3; // Current CPU utilization (0-100)
  int64 memory_usage_bytes = 4; // Current memory usage in bytes
  int32 active_tasks = 5; // Number of tasks currently being processed
  string message = 6; // Additional health information or error message
}
